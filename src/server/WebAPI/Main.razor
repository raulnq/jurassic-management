@using WebAPI.Infrastructure.Ui;

<!doctype html>
<html lang="en" data-bs-theme="auto">
<head>
    <script src="~/js/color-modes.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width =device-width, initial-scale=1.0">
    <script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/json-enc.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>

<body>
    <Navbar Text="Jurassic" />
    <main class="container-fluid h-100">
        <div class="row h-100">
            <Sidebar>
                <Items>
                    <SidebarLink HtmxProps=@(new HtmxProps(WebAPI.Collaborators.Endpoints.List.AddListParameters(), Targets.Workspace){OnClick="highlight_sidebarlink(this);"})
                                 Icon="bi bi-people-fill"
                                 Text="Collaborators" />
                    <SidebarLink HtmxProps=@(new HtmxProps(WebAPI.CollaboratorRoles.Endpoints.List.AddListParameters(), Targets.Workspace){OnClick="highlight_sidebarlink(this);"})
                                 Icon="bi bi-person-vcard-fill"
                                 Text="Collaborator Roles" />
                    <SidebarLink HtmxProps=@(new HtmxProps(WebAPI.Clients.Endpoints.List.AddListParameters(), Targets.Workspace){OnClick="highlight_sidebarlink(this);"})
                                 Icon="bi bi bi-wallet-fill"
                                 Text="Clients" />
                    <SidebarLink HtmxProps=@(new HtmxProps(WebAPI.Proformas.Endpoints.List.AddListParameters(), Targets.Workspace){OnClick="highlight_sidebarlink(this);"})
                                 Icon="bi bi bi-file-text-fill"
                                 Text="Proformas" />
                    <SidebarLink HtmxProps=@(new HtmxProps(WebAPI.Invoices.Endpoints.List.AddListParameters(), Targets.Workspace){OnClick="highlight_sidebarlink(this);"})
                                 Icon="bi bi-receipt"
                                 Text="Invoices" />
                </Items>
            </Sidebar>
            <div class="col-1"></div>
            <div class="col-8 pt-2" id=@(Targets.Workspace.Replace("#",""))>
            </div>
            <div class="col-1"></div>
        </div>
    </main>
    <Toast Id="success-toast" Type=Toast.ToastType.Success />
    <Toast Id="error-toast" Type=Toast.ToastType.Error />
    <div id="modal" class="modal fade">
        <div id=@(Targets.Dialog.Replace("#","")) class="modal-dialog"></div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        ; (function () {

            const errorToastElement = document.getElementById("error-toast")
            const errorToastBody = errorToastElement.querySelector(".toast-body")
            const errorToast = bootstrap.Toast.getOrCreateInstance(errorToastElement)

            htmx.on("htmx:responseError", (e) => {
                errorToastBody.innerText = e.detail.xhr.response
                errorToast.show()
            })

            const successToastElement = document.getElementById("success-toast")
            const successToastBody = successToastElement.querySelector(".toast-body")
            const sucessToast = bootstrap.Toast.getOrCreateInstance(successToastElement)

            htmx.on("successMessageEvent", (e) => {
                successToastBody.innerText = e.detail.value
                sucessToast.show()
            })

            const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById("modal"))

            htmx.on("openModalEvent", (e) => {
                modal.show()
            })

            htmx.on("closeModalEvent", (e) => {
                modal.hide()
            })

            htmx.on("hidden.bs.modal", () => {
                document.getElementById("dialog").innerHTML = ""
            })
        })()

        function highlight_row(el) {
            var row = el.closest('tr');
            var rows = el.closest('table').getElementsByTagName('tr');
            for (var index = 0; index < rows.length; index++) {
                rows[index].classList.remove('table-active');
            }
            rows[row.rowIndex].classList.add("table-active");
        }
        function highlight_sidebarlink(el) {
            var li = el.closest('li');
            let lis = Array.from(li.closest('ul').children)
            let liId = lis.indexOf(li);
            for (var index = 0; index < lis.length; index++) {
                lis[index].children[0].classList.remove('active');
            }
            lis[liId].children[0].classList.add("active");
        }
        function clean_select(id) {
            var selectobject = document.getElementById(id);
            for (var i = 0; i < selectobject.length; i++) {
                selectobject.remove(i);
            }
        }

    </script>
</body>
</html>
@code {

}
